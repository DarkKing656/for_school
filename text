void search_file(FILE* file_ptr, const char* search_string, int case_insensitive, 
                int inverse_match, int count_only, int print_filename_only, int line_number, 
                int multiple_files, const char* name, int regex_option) {
    
    char line[MAX_LINE_LENGTH];
    int match_count = 0;
    int current_line_number = 0;
    regex_t regex;

    if (regex_option) {
        int compile_status;
        if (case_insensitive) {
            compile_status = regcomp(&regex, search_string, REG_EXTENDED | REG_ICASE);
        } else {
            compile_status = regcomp(&regex, search_string, REG_EXTENDED);
        }
        if (compile_status) {
            char error_message[MAX_LINE_LENGTH];
            regerror(compile_status, &regex, error_message, MAX_LINE_LENGTH);
            printf("Ошибка компиляции регулярного выражения: %s\n", error_message);
            return;
        }
    }

    while (fgets(line, MAX_LINE_LENGTH, file_ptr)) {
        current_line_number++;

        int match_found;
        if (regex_option) {
            match_found = (regexec(&regex, line, 0, NULL, 0) == 0);
        } else {
            char* match_ptr = (case_insensitive) ? strcasestr(line, search_string) : strstr(line, search_string);
            match_found = (match_ptr != NULL);
        }

        if (match_found != inverse_match) {
            match_count++;
            if (print_filename_only) {
                if (line_number) {
                    printf("%s:%d\n", name, current_line_number);
                } else if (multiple_files > 1) {
                    printf("%s\n", name);
                }
                break;
            }
            if (line_number) {
                if (multiple_files > 1) {
                    printf("%s:%d:%s", name, current_line_number, line);
                } else {
                    printf("%d:%s", current_line_number, line);
                }
            } else {
                if (multiple_files > 1) {
                    printf("%s:%s", name, line);
                } else {
                    printf("%s", line);
                }
            }
        }
    }

    if (count_only) {
        printf("Количество совпадений: %d\n", match_count);
    }

    if (regex_option) {
        regfree(&regex);
    }
}
