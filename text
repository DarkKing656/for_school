#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <regex.h>

#define MAX_LINE_LENGTH 1000

char* strcasestr(const char* haystack, const char* needle) {
    if (haystack == NULL || needle == NULL) {
        return NULL;
    }

    size_t needle_len = strlen(needle);
    if (needle_len == 0) {
        return (char*) haystack;
    }

    while (*haystack) {
        if (strncasecmp(haystack, needle, needle_len) == 0) {
            return (char*) haystack;
        }
        haystack++;
    }

    return NULL;
}

char* read_regex_from_file(const char* filename) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        printf("Не удалось открыть файл %s\n", filename);
        return NULL;
    }

    fseek(file, 0, SEEK_END);
    long file_size = ftell(file);
    fseek(file, 0, SEEK_SET);

    char* regex_string = (char*) malloc(file_size + 1);  
    if (regex_string != NULL) {
        size_t new_len = fread(regex_string, sizeof(char), file_size, file);
        regex_string[new_len] = '\0';
    }

    fclose(file);

    return regex_string;
}

void search_file(FILE* file_ptr, const char* search_string, int case_insensitive, 
                int inverse_match, int count_only, int print_filename_only, int line_number) {
    
    char line[MAX_LINE_LENGTH];
    int match_count = 0;
    int current_line_number = 0;

    while (fgets(line, MAX_LINE_LENGTH, file_ptr)) {
        current_line_number++;

        char* match_ptr;
        if (case_insensitive) {
            match_ptr = strcasestr(line, search_string);
        } else {
            match_ptr = strstr(line, search_string);
        }

        int match_found = (match_ptr != NULL);
        if (match_found != inverse_match) {
            match_count++;
            if (print_filename_only) {
                if (line_number) {
                    printf("%s:%d\n", file_ptr == stdin ? "stdin" : "file", current_line_number);
                } else {
                    printf("%s\n", file_ptr == stdin ? "stdin" : "file");
                }
                break;
            }
            if (line_number) {
                printf("%s:%d:%s", file_ptr == stdin ? "stdin" : "file", current_line_number, line);
            } else {
                printf("%s", line);
            }
        }
    }

    if (count_only) {
        printf("Количество совпадений: %d\n", match_count);
    }
}

int main(int argc, char *argv[]) {
    int opt;
    int case_insensitive = 0;
    int inverse_match = 0;
    int count_only = 0;
    int print_filename_only = 0;
    int line_number = 0;
    int quiet_mode = 0;
    int print_match_only = 0;

    char *search_string = NULL;
    regex_t regex;
    int regex_option = 0;

    while ((opt = getopt(argc, argv, "isvclf:ne:")) != -1) {
        switch (opt) {
            case 'i':
                case_insensitive = 1;
                break;
            case 's':
                quiet_mode = 1;
                break;
            case 'v':
                inverse_match = 1;
                break;
            case 'c':
                count_only = 1;
                break;
            case 'l':
                print_filename_only = 1;
                break;
            case 'n':
                line_number = 1;
                break;
            case 'f':
                regex_option = 1;
                search_string = read_regex_from_file(optarg);
                break;
            case 'e':
                regex_option = 1;
                search_string = optarg;
                break;
            default:
                printf("Неизвестная опция: -%c\n", opt);
                return 1;
        }
    }

    if (search_string == NULL) {
        if (optind < argc) {
            search_string = argv[optind++];
        } else {
            printf("Использование: ./my_grep [-i|-s|-v|-c|-l|-n] [-f <файл_с_регулярным_выражением>|-e <регулярное_выражение>] [<файл>]\n");
            return 1;
        }
    }
    
    if (optind < argc) {
        for (int i = optind; i < argc; i++) {
            FILE *file_ptr = fopen(argv[i], "r");
            if (file_ptr == NULL) {
                printf("Не удалось открыть файл %s\n", argv[i]);
                return 1;
            }
            
            if (regex_option) {
                int compile_status;
                if (case_insensitive) {
                    compile_status = regcomp(&regex, search_string, REG_EXTENDED | REG_ICASE);
                } else {
                    compile_status = regcomp(&regex, search_string, REG_EXTENDED);
                }
                if (compile_status) {
                    char error_message[MAX_LINE_LENGTH];
                    regerror(compile_status, &regex, error_message, MAX_LINE_LENGTH);
                    printf("Ошибка компиляции регулярного выражения: %s\n", error_message);
                    return 1;
                }
            }

            search_file(file_ptr, search_string, case_insensitive, inverse_match, 
                        count_only, print_filename_only, line_number);
            
            fclose(file_ptr);
        }
    } else {
        search_file(stdin, search_string, case_insensitive, inverse_match, 
                    count_only, print_filename_only, line_number);
    }

    return 0;
}
